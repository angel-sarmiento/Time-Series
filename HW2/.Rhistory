filter(!grepl('Live at Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
kanye <- get_artist_audio_features('Kanye West')
useless_features <- c("album_release_year", "disc_number", "track_number")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values. After this, the track names are selected
# by the top 25 "saddest" songs (using the spotify data's Valence measure).
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live at Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
kanye <- get_artist_audio_features('Kanye West')
useless_features <- c("album_release_year", "disc_number", "track_number")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values. After this, the track names are selected
# by the top 25 "saddest" songs (using the spotify data's Valence measure).
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live At Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
View(top_dend)
kanye <- get_artist_audio_features('Kanye West')
#Some of the features are not conducive to clustering and might skew the model.
useless_features <- c("album_release_year", "disc_number", "track_number", "time_signature")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values.
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live At Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# After this, the track names are selected by the top 25 "saddest" songs (using the spotify data's Valence measure).
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
kanye <- get_artist_audio_features('Kanye West')
#Some of the features are not conducive to clustering and might skew the model.
useless_features <- c("album_release_year", "disc_number", "track_number", "time_signature")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values.
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live At Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# After this, the track names are selected by the top 25 "saddest" songs (using the spotify data's Valence measure).
ungroup() %>%
top_n(25, valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
kanye <- get_artist_audio_features('Kanye West')
#Some of the features are not conducive to clustering and might skew the model.
useless_features <- c("album_release_year", "disc_number", "track_number", "time_signature")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values.
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live At Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# After this, the track names are selected by the top 25 "saddest" songs (using the spotify data's Valence measure).
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 9) %>%
color_labels(k = 9)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
hclust
?hclust
kanye <- get_artist_audio_features('Kanye West')
#Some of the features are not conducive to clustering and might skew the model.
useless_features <- c("album_release_year", "disc_number", "track_number", "time_signature")
# Here is code to select the numerical variables in the data, bind the columns with names together, filter out skits,
# and other irregular song titles, finding the mean of the numerical values.
kanye <- kanye %>% select_if(is.numeric) %>%
select(-one_of(useless_features)) %>%
bind_cols(kanye %>% select(track_name)) %>%
filter(!grepl('Skit', track_name)) %>%
filter(!grepl('Album Version', track_name)) %>%
filter(!grepl('Live At Abbey Road Studios', track_name)) %>%
group_by(track_name) %>%
summarise_if(is.numeric, mean, na.rm = TRUE) %>%
# After this, the track names are selected by the top 25 "saddest" songs (using the spotify data's Valence measure).
ungroup() %>%
top_n(25, -valence) %>%
column_to_rownames("track_name") %>%
as.data.frame()
#creating the dendrogram
top_dend <- as.dendrogram(hclust(dist(kanye))) %>%
color_branches(k = 8) %>%
color_labels(k = 8)
circlize_dendrogram(top_dend, labels_track_height = 0.3, dend_track_height = 0.3)
remotes::install_github('yihui/xaringan', upgrade = TRUE)
library(knitr)
knitr::opts_chunk$set(
eval = TRUE,
echo = FALSE
)
library("ISLR")
library("MASS")
data("Weekly")
knit_with_parameters('~/Documents/Graduate/First Year/Scientific Programming (R)/Project/Presentation1/Presentation_temp.Rmd')
install.packages('xaringan')
install.packages("xaringan")
options(htmltools.dir.version = FALSE, servr.interval = 1)
library(knitr)
opts_chunk$set(
fig.align="center", fig.width=6, fig.height=4.5,
out.width="748px", #out.length="520.75px",
dpi=300, #fig.path='Figs/',
cache=F#, echo=F, warning=F, message=F
)
knitr::opts_chunk$set(comment = NA, message = NA)
xaringan:::inf_mr()
xaringan:::inf_mr()
install.packages("rvest")
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health)
rm(Weekly)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/") %>%
html_nodes(".thread_body") %>%
html_text()
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/") %>%
html_nodes('.thread_body') %>%
html_text()
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/") %>%
html_nodes('.thread_body') %>%
html_text()
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/") %>%
html_nodes('.thread-body') %>%
html_text()
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Library Import ----------------------------------------------------------
library(rvest)
library(tidyverse)
library(beepr)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
View(digestive_health_all)
urls
?sapply()
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
?paste0
urls
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
?bind_rows
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
?sprintf
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
?function
?function()
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
?paste0
urls
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
?map
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
# Testing -----------------------------------------------------------------
pages <- list(pages)
for(i in pages) {
url <- paste0("http://www.address.com/some/page=", i)
page[i] <- read_html(url) %>%
html_nodes('.thread-body') %>%
html_text()
}
# Testing -----------------------------------------------------------------
for(i in pages) {
url <- paste0("http://www.address.com/some/page=", i)
page[i] <- read_html(url) %>%
html_nodes('.thread-body') %>%
html_text()
}
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
digestive_health_all[["comments"]]
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=1") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=2") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=3") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=67") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health#pi37=8") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
####NO MATTER WHAT NUMBER I PUT HERE, IT JUST RETURNS THE FIRST PAGE
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health#pi37=9") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
# Library Import ----------------------------------------------------------
library(rvest)
library(tidyverse)
library(beepr)
library(purrr)
# Pulling One Set of Text -------------------------------------------------
#Here I am going to attempt to pull one page of everything related to digestive health
####NO MATTER WHAT NUMBER I PUT HERE, IT JUST RETURNS THE FIRST PAGE
digestive_health <-  read_html("https://messageboards.webmd.com/health-conditions/f/digestive-health#pi37=9") %>%
html_nodes('.thread-body') %>%
html_text()
digestive_health
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Post Retrieval -----------------------------------------------------------
#function to get the posts from each page
## FOR THE FUTURE: grabbing multiple parts of the comments (title, date, etc.)
get_posts <- function(x){
url <- sprintf("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=", x)
website <- read_html(url)
u <- 1:100
comments[u] <- html_nodes(website, '.thread-body') %>%
html_text() %>%
as.tibble()
#creating a dataframe, multiple inputs can be put here to create the entire dataframe
data.frame(comments)
}
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
rm(Weekly)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
knitr::opts_chunk$set(echo = TRUE)
integrand <- function(x)return(1/((x+1*sqrt(x))))
integrate(integrand, lower = 0, upper = Inf)
View(digestive_health_all)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(digestive_health_all)
# Post Retrieval -----------------------------------------------------------
#function to get the posts from each page
## FOR THE FUTURE: grabbing multiple parts of the comments (title, date, etc.)
get_posts <- function(x){
url <- sprintf("https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37=", x)
website <- read_html(url)
comments <- html_nodes(website, '.thread-body') %>%
html_text() %>%
as_tibble()
#creating a dataframe, multiple inputs can be put here to create the entire dataframe
data.frame(comments)
}
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
View(dig_health_all2)
source('~/Documents/GitHub/ds_research_SP_2020/web_scraping/WebMD_scraping/main_script.R', echo=TRUE)
# Other Function for post retrieval ---------------------------------------
pages <- 1:20
base_url <- "https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37="
urls <- paste0(base_url, pages)
item <- list()
get_post2 <- function(url){
item <- url %>%
read_html() %>%
html_nodes('.thread-body') %>%
html_text()
return(item)
}
get_post2(urls)
# Other Function for post retrieval ---------------------------------------
pages <- 1:20
base_url <- "https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37="
urls <- paste0(base_url, pages)
get_post2 <- function(url){
item <- url %>%
read_html() %>%
html_nodes('.thread-body') %>%
html_text()
return(item)
}
get_post2(urls)
# Other Function for post retrieval ---------------------------------------
pages <- 1:20
base_url <- "https://messageboards.webmd.com/health-conditions/f/digestive-health/#pi37="
urls <- paste0(base_url, pages)
get_post2 <- function(url){
url %>%
read_html() %>%
html_nodes('.thread-body') %>%
html_text()
}
# Function to all pages ---------------------------------------------------
#applying the function to all urls, creating a data frame
digestive_health_all <- map_df(1:20, get_posts); beep("coin")
#2nd function
dig_health_all2 <- sapply(urls, get_post2) %>%
data.frame()
View(dig_health_all2)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?ggacg
?ggacf
?ggAcf
install.packages("forecast")
install.packages("forecast"); beepr::beep("coin")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/Graduate/First Year/Time Series/STATA/HW2")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(data)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?ggAcf
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(autoplots)
?ggAcf()
source('~/.active-rstudio-document', echo=TRUE)
?ggAcf
source('~/.active-rstudio-document', echo=TRUE)
?ggacf
?ggAcf
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?facet_grid
source('~/.active-rstudio-document', echo=TRUE)
?facet_wrap
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
